{"version":3,"file":"static/js/281.1f16e288.chunk.js","mappings":"uPAEaA,EAAQC,EAAAA,EAAAA,MAAH,oPAgBLC,EAASD,EAAAA,EAAAA,OAAH,iPAeNE,EAAOF,EAAAA,EAAAA,KAAH,4KAUJG,EAAQH,EAAAA,EAAAA,KAAH,6MAYLI,EAASJ,EAAAA,EAAAA,OAAH,ic,2BCnDNK,EAAY,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OAerC,OACE,SAACH,EAAD,WACE,UAACF,EAAD,CAAMM,SAfS,SAAAC,GACjBA,EAAEC,iBACGD,EAAEE,OAAOJ,OAAOK,MAAMC,OAIvBN,IAAWE,EAAEE,OAAOJ,OAAOK,MAAMC,OAAOC,MAAM,KAAKC,KAAK,KAI5DT,EAAUG,EAAEE,OAAOJ,OAAOK,MAAMC,OAAOC,MAAM,KAAKC,KAAK,OAHrDC,EAAAA,EAAAA,IAAM,4BAJNA,EAAAA,EAAAA,IAAM,4BAQT,EAIG,WACE,UAACf,EAAD,CAAQgB,KAAK,SAAb,WACE,SAAC,MAAD,KACA,SAACd,EAAD,yBAGF,SAACJ,EAAD,CACEmB,KAAK,SACLD,KAAK,OACLE,aAAa,MACbC,WAAS,EACTC,YAAY,qBAKrB,E,mCCsBD,EAtDe,WAAO,IAAD,EACjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACF,GAA4BC,EAAAA,EAAAA,UAAQ,UAACF,EAAaG,IAAI,gBAAlB,QAA8B,IAAlE,eAAOnB,EAAP,KAAeD,EAAf,KACA,GAA4BmB,EAAAA,EAAAA,UAAS,IAArC,eAAOE,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MA4BjB,OAlBAC,EAAAA,EAAAA,YAAU,WACJ,GAAKxB,EAAL,CAGJiB,EAAgB,CAAEQ,MAAOzB,IACvB,IAAM0B,EAAK,mCAAG,sGAEJC,EAFI,mGAGoF3B,GAHpF,SAIa4B,EAAAA,EAAAA,IAAUD,GAJvB,OAIJE,EAJI,OAKVR,EAAUQ,EAASC,KAAKC,SALd,gDAOVC,QAAQC,MAAM,UAPJ,yDAAH,qDAUXP,GAZD,CAaF,GAAC,CAAC1B,EAAQiB,KAIT,iCACE,0CACA,SAACnB,EAAD,CAAWE,OAAQA,EAAQD,UAAWA,KAEtC,0BACG,IACAqB,EAAOc,KAAI,SAAAC,GACV,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMjB,GAAxC,SACGa,EAAMK,SAFFL,EAAME,GAMlB,SAIR,C","sources":["components/Searchbar/Searchbar.styled.js","components/Searchbar/Searchbar.jsx","pages/Movies.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Input = styled.input`\ndisplay: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n\n  ::placeholder {\n  font: inherit;\n  font-size: 18px;\n}\n`;\n\nexport const Button = styled.button`\ndisplay: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n\n  :hover {\n  opacity: 1;\n}\n`;\n\nexport const Form = styled.form`\ndisplay: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const Label = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n\nexport const Search = styled.header`\n  top: 0;\n  left: 0;\n  position: sticky;\n  z-index: 1100;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 64px;\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  color: #fff;\n  background-color: #3f51b5;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;","import { Button, Form, Input, Label, Search } from './Searchbar.styled';\nimport { BsSearch } from 'react-icons/bs';\nimport { toast } from 'react-toastify';\n\nexport const Searchbar = ({ setSearch, search }) => {\n  \n  const submitForm = e => {\n    e.preventDefault();\n    if (!e.target.search.value.trim()) {\n      toast('Enter some word to search');\n      return;\n    }\n    if (search === e.target.search.value.trim().split(' ').join('+')) {\n      toast('Enter new search please');\n      return;\n    }\n    setSearch(e.target.search.value.trim().split(' ').join('+'));\n  };\n\n  return (\n    <Search>\n      <Form onSubmit={submitForm}>\n        <Button type=\"submit\">\n          <BsSearch></BsSearch>\n          <Label>Search</Label>\n        </Button>\n\n        <Input\n          name=\"search\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movie\"\n        />\n      </Form>\n    </Search>\n  );\n};\n","import { Searchbar } from 'components/Searchbar/Searchbar';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Movies = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n  const [search, setSearch] = useState(searchParams.get('query') ?? '');\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n  // const filteredMovies = movieID\n  //   ? movies.filter(film => film.includes(movieID))\n  //   : movies;\n\n  // const updateQueryString = e => {\n  //   const nextParams = e.target.value !== '' ? { movieID: e.target.value } : {};\n  //   setSearchParams(nextParams);\n  // };\n\n  useEffect(() => {\n        if (!search) {\n          return;\n    }\n    setSearchParams({ query: search });\n      const fetch = async () => {\n        try {\n          const url =\n            `https://api.themoviedb.org/3/search/movie?api_key=cb1bcc244723619ea7f2217b5a84ccd8&query=${search}`;\n          const response = await axios.get(url);\n          setMovies(response.data.results);\n        } catch (error) {\n          console.error('Error:');\n        }\n      };\n      fetch();\n  },[search, setSearchParams]) \n  \n  return (\n    //state for map\n    <>\n      <h2>Search movie</h2>\n      <Searchbar search={search} setSearch={setSearch}></Searchbar>\n      {/* <input type=\"text\" value={movieID} onChange={updateQueryString} /> */}\n      <ul>\n        {' '}\n        {movies.map(movie => {\n          return (\n            <li key={movie.id}>\n              <Link to={`${movie.id}`} state={{ from: location }}>\n                {movie.title}\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["Input","styled","Button","Form","Label","Search","Searchbar","setSearch","search","onSubmit","e","preventDefault","target","value","trim","split","join","toast","type","name","autoComplete","autoFocus","placeholder","useSearchParams","searchParams","setSearchParams","useState","get","movies","setMovies","location","useLocation","useEffect","query","fetch","url","axios","response","data","results","console","error","map","movie","to","id","state","from","title"],"sourceRoot":""}